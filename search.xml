<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【二叉树】114 二叉树展开为链表</title>
    <url>/2022/01/01/12-57-01/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/">114 二叉树展开为链表</a></p>
<hr>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><strong>1.将二叉树展开成链表是怎么一个过程</strong></p>
<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以形如此的二叉树A为例：</span><br><span class="line">         1     </span><br><span class="line">        / \</span><br><span class="line">       2   5</span><br><span class="line">二叉树A转换成链表的过程是：</span><br><span class="line">         1             1</span><br><span class="line">        / \  -----&gt;     \</span><br><span class="line">       2   5             2</span><br><span class="line">                          \</span><br><span class="line">                           5</span><br></pre></td></tr></table></figure>

<p><strong>2.定义函数flatten的功能</strong></p>
<p>函数flatten的功能是把一棵二叉树展开成一个链表</p>
<p><strong>3.运用框架</strong></p>
<p>对于一个节点，把它的左子树展开成一个链表，再把它的右子树展开成一个链表，最后再对以该节点为根节点的树展开成链表。<strong>这是左右根的后序遍历框架。</strong></p>
<p><strong>4.例子</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    1              1               1</span><br><span class="line">   / \            / \               \</span><br><span class="line">  2   3  ----&gt;   2   3  ----&gt;        2</span><br><span class="line"> / \ / \          \   \               \</span><br><span class="line">4  5 6  7          4   6               4</span><br><span class="line">                    \   \               \</span><br><span class="line">                     5   7               5</span><br><span class="line">                                          \</span><br><span class="line">                                           3</span><br><span class="line">                                            \</span><br><span class="line">                                             6</span><br><span class="line">                                              \</span><br><span class="line">                                               7</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;left);  <span class="comment">//把左子树展开成链表</span></span><br><span class="line">        <span class="built_in">flatten</span>(root-&gt;right); <span class="comment">//把右子树展开成链表</span></span><br><span class="line">        <span class="comment">//记录下根的左右子树（左右子树均已展开成链表）</span></span><br><span class="line">        TreeNode* left = root-&gt;left;</span><br><span class="line">        TreeNode* right = root-&gt;right;</span><br><span class="line">        <span class="comment">//对根节点进行操作</span></span><br><span class="line">        <span class="comment">//1.将左子树接到右子树的位置</span></span><br><span class="line">        root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        root-&gt;right = left;</span><br><span class="line">        <span class="comment">//2.将原来的右子树接到现在的右子树下边</span></span><br><span class="line">        TreeNode* node = root;</span><br><span class="line">        <span class="keyword">while</span>(node-&gt;right != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            node = node-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
  </entry>
  <entry>
    <title>【二叉树】116 填充每个结点的下一个右侧结点指针</title>
    <url>/2021/12/31/23-25-30/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/">116 填充每个结点的下一个右侧结点指针</a></p>
<hr>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>1.题目的要求：使每个结点的指针指向它右侧的结点。</p>
<p>2.对于每一个结点要做的事情：让其左子树的根结点指向右子树的根结点。举例：对于1来说，是让2指向3 。</p>
<span id="more"></span>

<p>所以写一个函数A，其功能是让其左子树的根结点指向右子树的根结点。</p>
<p>3.对于一个结点，先对该结点进行“让其左子树的根结点指向右子树的根结点”功能，再对其左右子树做同样的操作，这是<strong>根左右的前序遍历框架</strong>。</p>
<p>4.但是依照上述操作不会使5指向6，因为对2进行该函数可以使4指向5，对3进行该函数可以使6指向7，但都无法使5指向6 。</p>
<p>5.所以改变函数A的功能，使其功能变为：使结点root1指向结点root2。对于一个结点，对该结点和其左右子结点进行完该函数后，还要加上5指向6这种情况。</p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Node* <span class="title">connect</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">connectTowNode</span>(root-&gt;left,root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//连接两个结点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectTowNode</span><span class="params">(Node* node1,Node* node2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node1 == <span class="literal">nullptr</span> || node2 == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//前序遍历</span></span><br><span class="line">        node1-&gt;next = node2;</span><br><span class="line">        <span class="comment">//连接具有相同父结点的两个子树</span></span><br><span class="line">        <span class="built_in">connectTowNode</span>(node1-&gt;left,node1-&gt;right);</span><br><span class="line">        <span class="built_in">connectTowNode</span>(node2-&gt;left,node2-&gt;right);</span><br><span class="line">        <span class="comment">//连接具有不同父结点的两棵子树</span></span><br><span class="line">        <span class="built_in">connectTowNode</span>(node1-&gt;right,node2-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
  </entry>
  <entry>
    <title>【二叉树】226 翻转二叉树</title>
    <url>/2021/12/31/10-44-49/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226 翻转二叉树</a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>【该做什么】翻转当前节点的左右子树</p>
<p>【什么时候做】先翻转当前节点的左右子树，再对以左右子树根节点为根的子树进行相同的操作，即前序遍历。</p>
<span id="more"></span>

<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对该结点的操作</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        <span class="comment">//左右子树</span></span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><p>该题还可用<strong>左右根的后序遍历框架</strong>来解决，即对于一个结点，先让左子树翻转它的子节点，再让右子树翻转它的子节点，最后翻转本结点的左右子树。</p>
<hr>
<h1 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);</span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        TreeNode* temp = root-&gt;left;</span><br><span class="line">        root-&gt;left = root-&gt;right;</span><br><span class="line">        root-&gt;right = temp;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>提交后发现<strong>采用后序遍历用时更少，内存消耗与前序遍历差不多</strong>。</p>
]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
  </entry>
  <entry>
    <title>2021年度总结</title>
    <url>/2022/01/01/20-21-22/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9b1722f1bdd7d315c46014fd8577c385160fe513050d04a11d239c2471341463"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未分类</category>
      </categories>
  </entry>
  <entry>
    <title>【二叉树】654 最大二叉树</title>
    <url>/2022/01/02/22-28-21/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/maximum-binary-tree/">654 最大二叉树</a></p>
<hr>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><strong>1.结合例子理解最大二叉树的定义（以nums = [3,2,1,6,0,5]为例）</strong></p>
<p>二叉树的根是数组nums中的最大元素，即6。6左边的数字[3,2,1]全在6的左子树中出现。6右边的数字[0,5]全在6的右子树中出现。</p>
<span id="more"></span>

<p>[3,2,1]中再找最大的构成根节点，它左边的在左子树中出现，它右边的在右子树中出现。</p>
<p>[0,5]中再找最大的构成根节点，它左边的在左子树中出现，它右边的在右子树中出现。</p>
<p><strong>2.明确根节点该做的事</strong></p>
<p>根节点要做的事就是使自己成为自己所属范围内的几个数字中的最大的那个。</p>
<p><strong>3.套用框架</strong></p>
<p>使根节点等于最大值，再使其左子树的根节点称为最大值，右子树的根节点成为最大值。这是<strong>根左右的前序遍历框架</strong></p>
<hr>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">constructMaximumBinaryTree</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">build</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给定nums[low...high],构造最大二叉树</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">build</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="comment">/***根节点要做的事：找出最大的元素构建一个结点***/</span></span><br><span class="line">        <span class="keyword">if</span>(low &gt; high)&#123;  <span class="comment">//注意只有大于的时候才能换，如果是等于的时候那么说明是有一个元素的，不能返回空。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = low; i &lt;= high; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; nums[i])&#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(max);</span><br><span class="line">        <span class="comment">//对最大值左右的元素做相同的操作构造根节点的左右子树</span></span><br><span class="line">        root-&gt;left = <span class="built_in">build</span>(nums,low,index - <span class="number">1</span>);</span><br><span class="line">        root-&gt;right = <span class="built_in">build</span>(nums,index + <span class="number">1</span>,high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>1.数组元素的大小：<code>nums.size()</code></p>
]]></content>
      <categories>
        <category>算法刷题</category>
      </categories>
  </entry>
  <entry>
    <title>《记一忘三二》</title>
    <url>/2021/12/30/19-00-06/</url>
    <content><![CDATA[<h1 id="李娟记"><a href="#李娟记" class="headerlink" title="李娟记"></a>李娟记</h1><p>1.从前有人生了一个女儿，她决心要给她取一个最特别的名字，全世界独一无二的名字。为此她翻烂了字典，终于由一部电影得到启发。她激动极了。</p>
<span id="more"></span>

<p>她为她取名为“娟”。</p>
<p>是的……就是我……李娟……</p>
<p>2.每当我向人做自我介绍，对方一听往往立刻接口：“哦我也认识一个李娟。”我说：“是的，这个名字很普遍。“<strong>开场白万年不变</strong>。</p>
<p>2.话说我从小就佩服“佚名”这个人，到处发表作品，创作跨美术文学诗歌多届，还活了好几千年。</p>
<p>3.长久以来，我的写作全都围绕个人生活展开。于是常有人替我担心：人的经历是有限的，万一把生活写完了怎么办？我不能理解“写完”是什么意思。好像写作就是开一瓶饮料，喝完拉倒。<strong>可我打开的明明是一条河，滔滔不绝，手忙脚乱也不能汲取其一二。总是这样——写着写着，记忆的某个点突然被刚成形的语言触动，另外的一扇门被打开。推开那扇门，又面对好几条路……对我来说，写作更像是无边无际的旅行，是源源不断地开启和收获。总之，只要一开始动笔，往往刹不住脚——不过，也可能是因为我话痨</strong>。</p>
<p>3.幸亏自己勤快，大事小事统统记下来再说。每次翻看自己成山成海乱七八糟的电脑文件夹便无比庆幸——像最贪得无厌的人那样庆幸。<strong>好吧，常年在河中拦网守候的人，总比隔三岔五空着手到水边碰运气的人收获稍多</strong>。</p>
<hr>
<h1 id="台湾记"><a href="#台湾记" class="headerlink" title="台湾记"></a>台湾记</h1><p>1.自从我妈从台湾回来，可嫌弃我们大陆了，一会儿嫌乌鲁木齐太吵，一会又嫌红墩乡太脏。整天一副”这日子简直没法过下去“的模样。抱怨完毕，换下衣服，立刻投入清理牛圈打扫鸡粪的劳动中，毫不含糊。</p>
<p>2.之后，足足又半年的时间，无论和谁聊天，她老人家总能在第三句或第四句话上成功地把话题引向台湾。</p>
<p>如果对方说某店的某道菜不错。</p>
<p>她立刻说：嗨！台湾的什么什么那才叫好吃呢！</p>
<p>接下来从台湾小吃说到环岛七日游。</p>
<p>对方：好久没下雨了。</p>
<p>她：台湾天天下雨！</p>
<p>接下来，从台湾的雨说到环岛七日游。</p>
<p>对方，这两天感冒了。</p>
<p>她：我也不舒服，从台湾回来，累的躺了好几天。</p>
<p>接下来，环岛七日游。</p>
<hr>
<h1 id="信仰记"><a href="#信仰记" class="headerlink" title="信仰记"></a>信仰记</h1><p>1.那年夏天，很长一段时间里她一个人住在遥远无人的荒野中看守着两百亩葵花地。整个夏天独自陷没在广阔的大地中，面朝黄土，除草、打杈、浇地，安静地侍弄着农活。有时干着干着，突然会孤独地想起某首赞美歌来，于是边唱边干活。茫茫荒野，自得其乐。</p>
<p>2.不管怎么说，把我妈这么吊儿郎当地人扔进一群郑重认真地人中间，多少还是有些益处的，至少有了些好的约束。最明显的变化就是骂人没有那么脏了。以前脱口就是”你姑的腿、你二的蛋“之类，虽野蛮有趣，毕竟不成体统。现在呢，一旦发怒，就只会不断地重复：”你这个魔鬼！你要下地狱！“总算文雅多了。</p>
<hr>
<h1 id="扫雪记"><a href="#扫雪记" class="headerlink" title="扫雪记"></a>扫雪记</h1><p>1.把清扫积雪说成”扫“雪，实在太含蓄了，说”铲“雪、”打“雪、”砍“雪都不为过啊。那可真是个力气活，用剁铲砍，用推板刮，拼命在雪堆里刨开一条通道，杀出一条血路。雪是轻盈浪漫的，可一旦堆积起来，便沉重又踏实，不近人情。</p>
<p>2.真想多交几个男朋友……帮忙扫雪……</p>
<hr>
<h1 id="挨打记"><a href="#挨打记" class="headerlink" title="挨打记"></a>挨打记</h1><p>我当然可以原谅她。”原谅“是非常容易就能做到的事情。可是，我有什么资格去原谅她呢？这样的暴力和恶意，恐怕只有上帝和佛祖才能原谅吧。我只是一个凡人，我化解不了这种阴暗。尤其是我自己心里的黑暗。</p>
<hr>
<h1 id="藏钱记"><a href="#藏钱记" class="headerlink" title="藏钱记"></a>藏钱记</h1><p>她说：”要是我有什么三长两短，你回到家，推门左转，门背后架着碎麦子麻袋垛的那排木板下有一只破纸箱，上面盖着几件旧衣服，下面有八千块钱……然后你继续往里走，仓库尽头通向鸡窝那扇门背后有一个放着破钉子烂螺帽的锈铁盆，你扒拉开，里面有个塑料袋装着两千块……你再推开门往里走，鸡圈西墙角的铁皮炉子后有一个大灰坑，你扒开，里面有一大包零钱……你再出门向东……“</p>
<h1 id="风华记"><a href="#风华记" class="headerlink" title="风华记"></a>风华记</h1><p>能有风华这样一个一直惦记着自己的朋友很幸福。</p>
<hr>
<h1 id="飞机记"><a href="#飞机记" class="headerlink" title="飞机记"></a>飞机记</h1><p>我家邻居大叔以前坐飞机旅行结婚。飞到半途乘务员给大家发了纸笔，叫写遗书……从此对飞机产生巨大阴影。</p>
<hr>
<h1 id="老师记"><a href="#老师记" class="headerlink" title="老师记"></a>老师记</h1><p>1.回想起过去，老师有些动情：“李娟，我早就看出来，你从小就与众不同，想法独特。美术课自由画画时，别的同学都只会画个小猫小狗小房子，只有你画的是大海、风帆和海鸥，还有天边的月亮……那时候，我就知道你志向高远，非同寻常……”——拉倒吧，那为啥还管我叫猪头小队长？</p>
<p>2.在假期的漫长时光里，我常常一个人跑到那里去看我的画。那个大厅似乎从来不关门，不上锁。我一个人走进去，沿着展道熟练地东拐西拐，在最尽头的角落里找到我的画，长时间地抬头看……当时，它几乎是我的唯一荣耀。</p>
<p>3.这么笨拙胆怯的一幅画，我才不信我那位老师能看出什么玄机来。我想，更多的，只是他善意的鼓励吧。他就是那么善良，无所畏惧、竭尽全力地善良着。</p>
<hr>
<h1 id="野猫记"><a href="#野猫记" class="headerlink" title="野猫记"></a>野猫记</h1><p>1.温柔的赛虎，善良的赛虎，浑身毛茸茸热乎乎的赛虎，在无数个炉火熄灭的寒冷冬夜，是猫咪们最甜美的依傍。宽绰的狗窝被塞得满满当当，身上还趴了俩。作为一只狗，可能会略感屈辱，但作为隆冬寒夜里同样孤独脆弱的生命，我猜它也会依恋此种舒适和安全感吧。</p>
<p>2.小奶猫之可爱！让人恨不能揣在口袋里走哪儿带哪儿，时不时掏出来搓搓揉揉，还总会令人自私地叹息：“要是永远都这么一点点永远长不大就好了！”虽然许多动物小时候都是可爱的，但在我看来什么都赶不上猫。由尤其当猫咪以征服世界的雄心来对付一个线团或一块破布头或自己的尾巴时，简直能令人跪地臣服。</p>
<p>3.它美丽、温顺、充满喜悦。它对我们的信任以及对我们这个家的依恋令人惊讶又幸福。它活在世上像在深深地安慰着我们。</p>
<hr>
<h1 id="过年记"><a href="#过年记" class="headerlink" title="过年记"></a>过年记</h1><p>追根究底，这一切可能都源于我外婆的教育。我外婆省下了压岁钱和新衣服，却令我疏远世事，冷静又孤独。<strong>冷静可能不是什么好事，冷静也许就是自我和自私。可孤独这种东西却太宝贵。孤独是强大的独立，令我从不曾畏惧过人生的变故。当然，这种话说起来又空又大。可是真的，在每一个普天同庆的特殊日子里，我远远站着，照常生活，像是没有行李的旅人，又穷，又轻松。</strong>我的幸福只有一种源头，它只滋生于内心，它和外部的现实秩序没有一点关系。</p>
<hr>
<h1 id="阅读记"><a href="#阅读记" class="headerlink" title="阅读记"></a>阅读记</h1><p>1.那可能是我生命之初的第一场阅读，犹如壳中小鸡啄开坚硬蛋壳的第一个小小孔隙。</p>
<p>阅读令我打开了通往更大也更黑的世界的一扇门。从此，只要是印有汉字的东西都会令我饥渴阅读。</p>
<p>2.——全都是毫无选择的阅读，全然接受，鲸吞海纳，吃干抹净……当年的耳语者还不曾走开，只对我一个人透漏唯一的秘密。</p>
<hr>
<h1 id="冰箱记"><a href="#冰箱记" class="headerlink" title="冰箱记"></a>冰箱记</h1><p>然而好景不长，没过多久我和我妈绝交了。</p>
<p>怎么说呢，我妈这人吧，交个朋友还是蛮不错的。做母女，实在艰难。若我们俩是夫妻，早就离婚几百次了。</p>
<hr>
<h1 id="疑惑记"><a href="#疑惑记" class="headerlink" title="疑惑记"></a>疑惑记</h1><p>我想象他心中的疑惑，以及无法想象的以光年计算以黑洞填充以生死相隔的巨大无边的陌生感。</p>
<hr>
<h1 id="古老记"><a href="#古老记" class="headerlink" title="古老记"></a>古老记</h1><p>那时，自然的气息除了香气，还有臭气。但香和臭是公平存在于这个世界上的，不是对立的。只要能忍受的东西，人们都不会太排斥。后来人们对臭味的否定，我觉得不过是偏见。没有人天生就喜欢一种气味而讨厌另一种气味。文明的暗示而已。于是，只要是让人不舒服的就都是不好的、不对的、不正常的。渐渐地，人越来越强势，可以按喜好操控一切。同时也越来越脆弱，不能忍受的东西越来越多。</p>
<hr>
<h1 id="渴望记"><a href="#渴望记" class="headerlink" title="渴望记"></a>渴望记</h1><p>1.在漫长的冬天里，那盘磁带被这个年轻人听了一遍又一遍。后来他决定学习这些歌。他反复倒带，一句句摸索歌词，将陌生的语言用阿拉伯字母拼注出来。冬天过去后，他便学会了那盘磁带里的所有歌。</p>
<p>2.春天，雪化了，牧羊人离开了森林，重新回到了自己的羊群之中。但是，他的人生悄然改变。他的世界还是那么大，但是多开了一扇美丽的窗子。</p>
]]></content>
      <categories>
        <category>文学</category>
      </categories>
  </entry>
</search>
